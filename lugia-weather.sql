-- Gerado por Oracle SQL Developer Data Modeler 23.1.0.087.0806
--   em:        2025-05-31 01:20:10 BRT
--   site:      Oracle Database 11g
--   tipo:      Oracle Database 11g



-- predefined type, no DDL - MDSYS.SDO_GEOMETRY

-- predefined type, no DDL - XMLTYPE

-- Drops para cada tabela
DROP TABLE TBL_ALERTA CASCADE CONSTRAINTS PURGE;
DROP TABLE TBL_LEITURA CASCADE CONSTRAINTS PURGE;
DROP TABLE TBL_TELEFONE CASCADE CONSTRAINTS PURGE;
DROP TABLE TBL_ENDERECO CASCADE CONSTRAINTS PURGE;
DROP TABLE TBL_DISPOSITIVO_IOT CASCADE CONSTRAINTS PURGE;
DROP TABLE TBL_USUARIO CASCADE CONSTRAINTS PURGE;

-- DDL
CREATE TABLE tbl_alerta (
    id_alerta    INTEGER GENERATED BY DEFAULT AS IDENTITY,
    tipo         VARCHAR2(50) NOT NULL,
    mensagem     VARCHAR2(500) NOT NULL,
    data_criacao TIMESTAMP DEFAULT SYSTIMESTAMP NOT NULL
);

ALTER TABLE tbl_alerta ADD CONSTRAINT tbl_alerta_pk PRIMARY KEY ( id_alerta );

CREATE TABLE tbl_dispositivo_iot (
    id_dispositivo   INTEGER GENERATED BY DEFAULT AS IDENTITY,
    id_modulo        VARCHAR2(100) NOT NULL UNIQUE,
    mac_endereco     VARCHAR2(50) NOT NULL UNIQUE,
    projeto          VARCHAR2(100) NOT NULL,
    status           VARCHAR2(50) NOT NULL,
    id_endereco      INTEGER NOT NULL,
    data_criacao     TIMESTAMP DEFAULT SYSTIMESTAMP NOT NULL,
    data_atualizacao TIMESTAMP
);

ALTER TABLE tbl_dispositivo_iot ADD CONSTRAINT tbl_dispositivo_iot_pk PRIMARY KEY ( id_dispositivo );

CREATE TABLE tbl_endereco (
    id_endereco      INTEGER GENERATED BY DEFAULT AS IDENTITY,
    logradouro       VARCHAR2(100) NOT NULL,
    bairro           VARCHAR2(50) NOT NULL,
    complemento      VARCHAR2(100),
    uf               CHAR(2) NOT NULL,
    localidade       VARCHAR2(50) NOT NULL,
    latitude         NUMBER(10, 6),
    longitude        NUMBER(11, 6),
    data_criacao     TIMESTAMP DEFAULT SYSTIMESTAMP NOT NULL,
    data_atualizacao TIMESTAMP
);

ALTER TABLE tbl_endereco ADD CONSTRAINT tbl_endereco_pk PRIMARY KEY ( id_endereco );

CREATE TABLE tbl_leitura (
    id_leitura     INTEGER GENERATED BY DEFAULT AS IDENTITY,
    id_dispositivo INTEGER NOT NULL,
    nivel_agua_cm  NUMBER(8, 3) NOT NULL,
    status_nivel   VARCHAR2(20) NOT NULL,
    data_criacao   TIMESTAMP DEFAULT SYSTIMESTAMP NOT NULL,
    id_alerta      INTEGER NOT NULL
);

CREATE UNIQUE INDEX tbl_leitura__idx ON
    tbl_leitura (
        id_alerta
    ASC );

ALTER TABLE tbl_leitura ADD CONSTRAINT tbl_leitura_pk PRIMARY KEY ( id_leitura );

CREATE TABLE tbl_telefone (
    id_telefone      INTEGER GENERATED BY DEFAULT AS IDENTITY,
    ddd              CHAR(2) NOT NULL,
    numero           CHAR(9) NOT NULL,
    data_criacao     TIMESTAMP DEFAULT SYSTIMESTAMP NOT NULL,
    data_atualizacao TIMESTAMP
);

ALTER TABLE tbl_telefone ADD CONSTRAINT tbl_telefone_pk PRIMARY KEY ( id_telefone );

CREATE TABLE tbl_usuario (
    id_usuario       INTEGER GENERATED BY DEFAULT AS IDENTITY,
    nome             VARCHAR2(70) NOT NULL,
    email            VARCHAR2(50) NOT NULL UNIQUE,
    senha            VARCHAR2(255) NOT NULL,
    id_endereco      INTEGER NOT NULL,
    id_telefone      INTEGER NOT NULL,
    data_criacao     TIMESTAMP DEFAULT SYSTIMESTAMP NOT NULL,
    data_atualizacao TIMESTAMP
);

ALTER TABLE tbl_usuario ADD CONSTRAINT tbl_usuario_pk PRIMARY KEY ( id_usuario );

ALTER TABLE tbl_dispositivo_iot
    ADD CONSTRAINT tbl_disp_endereco_fk FOREIGN KEY ( id_endereco )
        REFERENCES tbl_endereco ( id_endereco );

ALTER TABLE tbl_leitura
    ADD CONSTRAINT tbl_leitura_tbl_alerta_fk FOREIGN KEY ( id_alerta )
        REFERENCES tbl_alerta ( id_alerta );

ALTER TABLE tbl_leitura
    ADD CONSTRAINT tbl_leitura_disp_fk FOREIGN KEY ( id_dispositivo )
        REFERENCES tbl_dispositivo_iot ( id_dispositivo );

ALTER TABLE tbl_usuario
    ADD CONSTRAINT tbl_usuario_tbl_endereco_fk FOREIGN KEY ( id_endereco )
        REFERENCES tbl_endereco ( id_endereco );

ALTER TABLE tbl_usuario
    ADD CONSTRAINT tbl_usuario_tbl_telefone_fk FOREIGN KEY ( id_telefone )
        REFERENCES tbl_telefone ( id_telefone );

-- Select para cada tabela

SELECT * FROM TBL_ALERTA;

SELECT * FROM TBL_LEITURA;

SELECT * FROM TBL_TELEFONE;

SELECT * FROM TBL_ENDERECO;

SELECT * FROM TBL_DISPOSITIVO_IOT;

SELECT * FROM TBL_USUARIO;


-- Delete para cada tabela
DELETE FROM TBL_USUARIO;

DELETE FROM TBL_TELEFONE;

DELETE FROM TBL_LEITURA;

DELETE FROM TBL_ALERTA;

DELETE FROM TBL_DISPOSITIVO_IOT;

DELETE FROM TBL_ENDERECO;
COMMIT;


-- PL/SQL
SET VERIFY OFF;
SET SERVEROUTPUT ON; 


-- Procedure com bloco anônimo de inserção
BEGIN
    -- ENDERECO
    FOR i IN 1..5 LOOP
        INSERT INTO tbl_endereco (logradouro, bairro, complemento, uf, localidade, latitude, longitude)
        VALUES ('Rua ' || i, 'Bairro ' || i, 'Complemento ' || i, 'SP', 'Cidade ' || i, -23.5 + i, -46.6 + i);
    END LOOP;

    -- TELEFONE
    FOR i IN 1..5 LOOP
        INSERT INTO tbl_telefone (ddd, numero)
        VALUES ('1' || TO_CHAR(i), '90000000' || TO_CHAR(i));
    END LOOP;

    -- ALERTA
    FOR i IN 1..5 LOOP
        INSERT INTO tbl_alerta (tipo, mensagem)
        VALUES (
            CASE i WHEN 1 THEN 'Chuva leve' WHEN 2 THEN 'Chuva leve' WHEN 3 THEN 'Alagamento' WHEN 4 THEN 'Risco de alagamento' ELSE 'Alagamento' END,
            'Mensagem de alerta ' || i
        );
    END LOOP;

    -- DISPOSITIVO_IOT
    FOR i IN 1..5 LOOP
        INSERT INTO tbl_dispositivo_iot (id_modulo, mac_endereco, projeto, status, id_endereco)
        VALUES (
            'MOD' || i,
            '00:11:22:33:44:5' || i,
            'Detecção Enchente',
            CASE WHEN i=1 THEN 'Ativo' ELSE 'Inativo' END,
            i
        );
    END LOOP;

    -- USUARIO
    FOR i IN 1..5 LOOP
        INSERT INTO tbl_usuario (nome, email, senha, id_endereco, id_telefone)
        VALUES (
            'Usuário ' || i,
            'usuario' || i || '@exemplo.com',
            'senha' || i,
            i,
            i
        );
    END LOOP;

    -- LEITURA
    FOR i IN 1..5 LOOP
        INSERT INTO tbl_leitura (id_dispositivo, nivel_agua_cm, status_nivel, id_alerta)
        VALUES (
            i,
            ((5.0+i) * i),
            CASE i WHEN 1 THEN 'Normal' WHEN 2 THEN 'Chuva' WHEN 3 THEN 'Atenção' WHEN 4 THEN 'Risco' ELSE 'Alagado' END,
            i
        );
    END LOOP;
    COMMIT;
END;





-- Procedure com bloco anônimo de atualização
BEGIN
-- ENDERECO
FOR i IN 1..5 LOOP
UPDATE tbl_endereco
SET bairro = 'Bairro Atualizado ' || i, data_atualizacao = SYSDATE
WHERE id_endereco = i;
END LOOP;

-- TELEFONE
FOR i IN 1..5 LOOP
UPDATE tbl_telefone
SET numero = '98888888' || TO_CHAR(i), data_atualizacao = SYSDATE
WHERE id_telefone = i;
END LOOP;

-- ALERTA
FOR i IN 1..5 LOOP
UPDATE tbl_alerta
SET mensagem = 'Mensagem de alerta atualizada ' || i
WHERE id_alerta = i;
END LOOP;

-- DISPOSITIVO_IOT
FOR i IN 1..5 LOOP
UPDATE tbl_dispositivo_iot
SET status = 'Atualizado ' || i, data_atualizacao = SYSDATE
WHERE id_dispositivo = i;
END LOOP;

-- USUARIO
FOR i IN 1..5 LOOP
UPDATE tbl_usuario
SET nome = 'Usuário Atualizado ' || i, data_atualizacao = SYSDATE
WHERE id_usuario = i;
END LOOP;

-- LEITURA
FOR i IN 1..5 LOOP
UPDATE tbl_leitura
SET nivel_agua_cm = 100.0 + i
WHERE id_leitura = i;
END LOOP;
COMMIT;
END;



-- Procedure com bloco anônimo de exclusão
BEGIN
-- LEITURA
FOR i IN 1..5 LOOP
DELETE FROM tbl_leitura WHERE id_leitura = i;
END LOOP;

-- USUARIO
FOR i IN 1..5 LOOP
DELETE FROM tbl_usuario WHERE id_usuario = i;
END LOOP;

-- DISPOSITIVO_IOT
FOR i IN 1..5 LOOP
DELETE FROM tbl_dispositivo_iot WHERE id_dispositivo = i;
END LOOP;

-- ALERTA
FOR i IN 1..5 LOOP
DELETE FROM tbl_alerta WHERE id_alerta = i;
END LOOP;

-- TELEFONE
FOR i IN 1..5 LOOP
DELETE FROM tbl_telefone WHERE id_telefone = i;
END LOOP;

-- ENDERECO
FOR i IN 1..5 LOOP
DELETE FROM tbl_endereco WHERE id_endereco = i;
END LOOP;
COMMIT;
END;



-- Funções para retorno de dados

-- Função 1 -> Calcular média dos registros de nível da água.
CREATE OR REPLACE FUNCTION fnc_nivel_medio_geral
RETURN NUMBER
IS
    v_media NUMBER;
BEGIN
    SELECT AVG(nivel_agua_cm)
      INTO v_media
      FROM tbl_leitura;

    RETURN NVL(v_media, 0);
END;

SELECT fnc_nivel_medio_geral() FROM dual;


-- Função 2  -> Contador de alertas por tipo
CREATE OR REPLACE FUNCTION fnc_total_alertas_tipo(p_tipo IN VARCHAR2)
RETURN NUMBER
IS
    v_total NUMBER;
BEGIN
    SELECT COUNT(*)
      INTO v_total
      FROM tbl_alerta
     WHERE tipo = p_tipo;

    RETURN v_total;
END;

SELECT fnc_total_alertas_tipo('Alagamento') FROM dual;



-- 5 e 6 -> Consultas complexas utilizando cursores explicitos

-- Relatório de Dispositivos com Média do Nível de Água e Alerta de Risco
DECLARE
    v_id_dispositivo    tbl_dispositivo_iot.id_dispositivo%TYPE;
    v_id_modulo         tbl_dispositivo_iot.id_modulo%TYPE;
    v_media_nivel       NUMBER(8,3);
    v_status_risco      VARCHAR2(100);
    

    CURSOR c_dispositivos IS
        SELECT d.id_dispositivo, d.id_modulo, AVG(l.nivel_agua_cm) AS media_nivel
          FROM tbl_dispositivo_iot d
          JOIN tbl_leitura l ON l.id_dispositivo = d.id_dispositivo
         GROUP BY d.id_dispositivo, d.id_modulo
        HAVING AVG(l.nivel_agua_cm) IS NOT NULL
         ORDER BY media_nivel DESC;
BEGIN
    OPEN c_dispositivos;
    LOOP
        FETCH c_dispositivos INTO v_id_dispositivo, v_id_modulo, v_media_nivel;
        EXIT WHEN c_dispositivos%NOTFOUND;

        -- IF/ELSE para classificação de risco
        IF v_media_nivel > 50 THEN
            v_status_risco := 'RISCO DE ALAGAMENTO';
        ELSE
            v_status_risco := 'Nível seguro';
        END IF;

        DBMS_OUTPUT.PUT_LINE('Dispositivo: ' || v_id_modulo ||
                             ' | Média nível água: ' || v_media_nivel ||
                             ' | Status: ' || v_status_risco);
    END LOOP;
    CLOSE c_dispositivos;
END;


-- Relatório de Usuários e Dispositivos Monitorados
DECLARE
    v_nome          tbl_usuario.nome%TYPE;
    v_email         tbl_usuario.email%TYPE;
    v_total_disp    NUMBER;
    v_status_disp   VARCHAR2(50);

    -- Cursor para usuários
    CURSOR c_usuarios IS
        SELECT u.id_usuario, u.nome, u.email, u.id_endereco
          FROM tbl_usuario u
         ORDER BY u.nome;

    -- Cursor para dispositivos por endereço
    CURSOR c_disp_status(p_id_endereco INTEGER) IS
        SELECT status
          FROM tbl_dispositivo_iot
         WHERE id_endereco = p_id_endereco;

BEGIN
    FOR r_usuario IN c_usuarios LOOP
        v_total_disp := 0;
        v_status_disp := '';

        -- Conta dispositivos no endereço do usuário
        FOR r_disp IN c_disp_status(r_usuario.id_endereco) LOOP
            v_total_disp := v_total_disp + 1;
            v_status_disp := v_status_disp || r_disp.status || ' | ';
        END LOOP;

        IF v_total_disp > 0 THEN
            DBMS_OUTPUT.PUT_LINE('Usuário: ' || r_usuario.nome ||
                                 ' | Email: ' || r_usuario.email ||
                                 ' | Dispositivos monitorados: ' || v_total_disp ||
                                 ' | Status: ' || v_status_disp);
        ELSE
            DBMS_OUTPUT.PUT_LINE('Usuário: ' || r_usuario.nome ||
                                 ' | Email: ' || r_usuario.email ||
                                 ' | Nenhum dispositivo monitorado em seu endereço!');
        END IF;
    END LOOP;
END;

-- 5 Consultas SQL complexas

-- 1 -> Total de leituras e média do nível de água por dispositivo
SELECT d.id_modulo, COUNT(l.id_leitura) AS total_leituras, AVG(l.nivel_agua_cm) AS media_nivel_agua FROM
    tbl_dispositivo_iot d JOIN tbl_leitura l ON d.id_dispositivo = l.id_dispositivo
GROUP BY d.id_modulo ORDER BY media_nivel_agua DESC;

-- 2 -> Total de alertas por tipo, exibindo apenas tipos com mais de 1 ocorrência
SELECT tipo, COUNT(*) AS total_alertas FROM tbl_alerta GROUP BY tipo
HAVING COUNT(*) > 1 ORDER BY total_alertas DESC;

-- 3 -> Usuários com o total de dispositivos em seu endereço
SELECT u.nome, u.email, COUNT(d.id_dispositivo) AS total_dispositivos FROM tbl_usuario u
JOIN tbl_endereco e ON u.id_endereco = e.id_endereco LEFT JOIN tbl_dispositivo_iot d ON d.id_endereco = e.id_endereco
GROUP BY u.nome, u.email ORDER BY total_dispositivos DESC;

-- 4 -> Bairros com maior ocorrência de alertas de alagamento
SELECT e.bairro, COUNT(a.id_alerta) AS total_alertas_alagamento
FROM tbl_endereco e JOIN tbl_dispositivo_iot d ON d.id_endereco = e.id_endereco
JOIN tbl_leitura l ON l.id_dispositivo = d.id_dispositivo
JOIN tbl_alerta a ON a.id_alerta = l.id_alerta
WHERE a.tipo = 'Alagamento' GROUP BY e.bairro
HAVING COUNT(a.id_alerta) > 0 ORDER BY total_alertas_alagamento DESC;

-- 5 -> Resumo Dispositivos
SELECT d.id_modulo, d.status, COUNT(l.id_leitura) AS total_leituras,
MAX(l.data_criacao) AS ultima_leitura FROM tbl_dispositivo_iot d
LEFT JOIN tbl_leitura l ON d.id_dispositivo = l.id_dispositivo
GROUP BY d.id_modulo, d.status ORDER BY ultima_leitura DESC;



-- Relat�rio do Resumo do Oracle SQL Developer Data Modeler: 
-- 
-- CREATE TABLE                             6
-- CREATE INDEX                             1
-- ALTER TABLE                             11
-- CREATE VIEW                              0
-- ALTER VIEW                               0
-- CREATE PACKAGE                           0
-- CREATE PACKAGE BODY                      0
-- CREATE PROCEDURE                         0
-- CREATE FUNCTION                          0
-- CREATE TRIGGER                           0
-- ALTER TRIGGER                            0
-- CREATE COLLECTION TYPE                   0
-- CREATE STRUCTURED TYPE                   0
-- CREATE STRUCTURED TYPE BODY              0
-- CREATE CLUSTER                           0
-- CREATE CONTEXT                           0
-- CREATE DATABASE                          0
-- CREATE DIMENSION                         0
-- CREATE DIRECTORY                         0
-- CREATE DISK GROUP                        0
-- CREATE ROLE                              0
-- CREATE ROLLBACK SEGMENT                  0
-- CREATE SEQUENCE                          0
-- CREATE MATERIALIZED VIEW                 0
-- CREATE MATERIALIZED VIEW LOG             0
-- CREATE SYNONYM                           0
-- CREATE TABLESPACE                        0
-- CREATE USER                              0
-- 
-- DROP TABLESPACE                          0
-- DROP DATABASE                            0
-- 
-- REDACTION POLICY                         0
-- 
-- ORDS DROP SCHEMA                         0
-- ORDS ENABLE SCHEMA                       0
-- ORDS ENABLE OBJECT                       0
-- 
-- ERRORS                                   2
-- WARNINGS                                 0
